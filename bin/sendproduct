#!/usr/bin/env python

# stdlib imports
import argparse
import os
import shutil

# local imports
from product.constants import BASE_PDL_FOLDER, CFG, JAR, JAVA, PRIVATEKEY
from product.pdl import store_fault
from product.web_product import WebProduct


def get_parser():
    description = '''Send a finite fault product for event pages.'''
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('eventsource',
                        help='Source of the original event ID. (example: us, usp, ci)')
    parser.add_argument('source',
                        help='Source of this product (i.e., contributor of the product. example: us).')
    parser.add_argument('eventid', help='Event identification code.')
    parser.add_argument('ffm1', help='Directory where all files are '
                        'contained for the finite fault model.')
    parser.add_argument('-ffm2', dest="ffm2", type=str, default='',
                        help='Directory where all files are contained for the second '
                        'finite fault model.')
    parser.add_argument("-v", "--version", dest="version",
                        help="Add a version number to the finite fault output",
                        metavar="COMMENT")
    parser.add_argument("-r", "--review", action="store_true",
                        dest="doReview", default=False,
                        help="Don't send products to PDL. Only create the product folder.")
    parser.add_argument("-x", "--not-reviewed", action="store_false",
                        dest="reviewedByScientist", default=True,
                        help="Mark that the sent product was not reviewed by a scientist. "
                        "This will cause a flag to be displayed on the web page.")
    return parser


def main(args):
    two_faults = False
    comment = 'Not available yet.'

    if args.version is None:
        version = 1
    else:
        version = int(args.version)
        if version < 1:
            raise Exception(
                'Version number less than one %r.' % args.version)
    if args.ffm2 != '':
        multiple = True
    else:
        multiple = False
    source = args.source
    ffm1dir = args.ffm1
    product1 = WebProduct.fromDirectory(ffm1dir, args.eventid,
                                        version=version, multiple=multiple)

    folders = ''
    if multiple:
        pdlfolder1 = os.path.join(BASE_PDL_FOLDER, args.eventid + '_1')
        pdlfolder2 = os.path.join(BASE_PDL_FOLDER, args.eventid + '_2')

        ffm2dir = args.ffm2
        product2 = WebProduct.fromDirectory(ffm2dir, args.eventid,
                                            version=version, multiple=multiple)
        # overwrite the folder to stop conflicts
        if os.path.exists(pdlfolder2):
            shutil.rmtree(pdlfolder2)
        os.makedirs(pdlfolder2)
        copy_files(product2.paths, pdlfolder2)
        folders += pdlfolder2 + ' and '
    else:
        pdlfolder1 = os.path.join(BASE_PDL_FOLDER, args.eventid)
    # overwrite the folder to stop conflicts
    if os.path.exists(pdlfolder1):
        shutil.rmtree(pdlfolder1)
    os.makedirs(pdlfolder1)
    copy_files(product1.paths, pdlfolder1)
    folders += pdlfolder1

    if args.reviewedByScientist:
        reviewed = True
    else:
        reviewed = False

    if not args.doReview:
        if multiple:
            f1 = os.path.join(pdlfolder1, args.eventid + '.html')
            f2 = os.path.join(pdlfolder2,  args.eventid + '.html')
            send_product(args.eventid, args.eventsource, product2, pdlfolder2,
                         source, reviewed, 2)
            send_product(args.eventid, args.eventsource, product1, pdlfolder1,
                         source, reviewed, 1)
        else:
            send_product(args.eventid, args.eventsource, product1, pdlfolder1,
                         source, reviewed)
        print('Sent product files were written to %s' % folders)
    else:
        print('Product files were written to %s' % folders)


def copy_files(file_directory, pdl_directory):
    for key in file_directory:
        current = file_directory[key][0]
        future = os.path.join(pdl_directory, file_directory[key][1])
        shutil.copy2(current, future)


def send_product(eventid, network, product, pdlfolder, source, reviewed,
                 number=None):
    """
    Configure pdl and send product directory.
    """
    if not os.path.exists(JAVA):
        raise FileNotFoundError("File does not exist %r." % JAVA)
    if not os.path.exists(JAR):
        raise FileNotFoundError("File does not exist %r." % JAR)
    if not os.path.exists(CFG):
        raise FileNotFoundError("File does not exist %r." % CFG)
    if not os.path.exists(PRIVATEKEY):
        raise FileNotFoundError("File does not exist %r." % PRIVATEKEY)
    files, msg = store_fault(CFG, network, eventid, JAR, JAVA,
                             pdlfolder, PRIVATEKEY, source, product.properties, reviewed,
                             number=number)
    print(files, msg)


if __name__ == '__main__':
    parser = get_parser()
    pargs, unknown = parser.parse_known_args()
    main(pargs)
